
MEGA_SETBAUD_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800114  00800114  0000043a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000379  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000218  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000095c  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000ba03  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000cb  00000000  00000000  0000d94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000da16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00002fe0  00000000  00000000  0000da4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	f7 d0       	rcall	.+494    	; 0x28a <main>
  9c:	78 c1       	rjmp	.+752    	; 0x38e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_putchar>:
 * \param data the data to send over UART
 */
static void uart_putchar(uint8_t data)
{
	// Make sure that the UART buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <uart_putchar+0x4>
	UDR0 = data;
  aa:	80 93 c6 00 	sts	0x00C6, r24
  ae:	08 95       	ret

000000b0 <enableADC>:
}*/


//enable ADC, turns on stuff needed by ADC
static void enableADC(void) {
	PRR &= 0xFE; //turn on ADC power
  b0:	e4 e6       	ldi	r30, 0x64	; 100
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
	/* Enable the ADC */
	ADCSRA |= 0x80;
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <__vector_9>:

static void turnONXBee(void) {
	PORTD &= ~(1 << PORTD7);
}

ISR(TIMER2_OVF_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	cli();
  e8:	f8 94       	cli
	//Wake up the device and do ADC
	enableADC();
  ea:	e2 df       	rcall	.-60     	; 0xb0 <enableADC>
	dataBuffer[dataNum++] = adc_read(ADC_PIN);
  ec:	80 91 24 01 	lds	r24, 0x0124
  f0:	90 91 25 01 	lds	r25, 0x0125
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	20 81       	ld	r18, Z
  fa:	20 7f       	andi	r18, 0xF0	; 240
  fc:	20 83       	st	Z, r18
	ADMUX	|=	adcx;
  fe:	20 81       	ld	r18, Z
 100:	20 83       	st	Z, r18
 
	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 81       	ld	r18, Z
 108:	20 64       	ori	r18, 0x40	; 64
 10a:	20 83       	st	Z, r18
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
 10c:	20 81       	ld	r18, Z
 10e:	26 fd       	sbrc	r18, 6
 110:	fd cf       	rjmp	.-6      	; 0x10c <__vector_9+0x46>
 
	/* Finally, we return the converted value to the calling function. */
	return ADC;
 112:	20 91 78 00 	lds	r18, 0x0078
 116:	30 91 79 00 	lds	r19, 0x0079

ISR(TIMER2_OVF_vect) {
	cli();
	//Wake up the device and do ADC
	enableADC();
	dataBuffer[dataNum++] = adc_read(ADC_PIN);
 11a:	fc 01       	movw	r30, r24
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	ea 5d       	subi	r30, 0xDA	; 218
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	31 83       	std	Z+1, r19	; 0x01
 126:	20 83       	st	Z, r18
 128:	01 96       	adiw	r24, 0x01	; 1
	dataNum = dataNum%MAXNUMOFDATA;
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	d9 d0       	rcall	.+434    	; 0x2e2 <__divmodhi4>
 130:	90 93 25 01 	sts	0x0125, r25
 134:	80 93 24 01 	sts	0x0124, r24
	ADCSRA |= 0x80;
}

//disable ADC. This also puts the ADC stuff into idle mode
static void disableADC(void) {
	ADCSRA &= 0x7F; //disable ADC
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	80 83       	st	Z, r24
	PRR |= 0x01; //turn off ADC power
 142:	e4 e6       	ldi	r30, 0x64	; 100
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
		//turn off the Xbee
		turnOFFXBee();
	}*/
	
	// DO the 1000 cycle calculation
	for(incrementer = 0; incrementer < 1000; incrementer++);
 14c:	10 92 35 01 	sts	0x0135, r1
 150:	10 92 34 01 	sts	0x0134, r1
 154:	80 91 34 01 	lds	r24, 0x0134
 158:	90 91 35 01 	lds	r25, 0x0135
 15c:	88 3e       	cpi	r24, 0xE8	; 232
 15e:	93 40       	sbci	r25, 0x03	; 3
 160:	84 f4       	brge	.+32     	; 0x182 <__vector_9+0xbc>
 162:	80 91 34 01 	lds	r24, 0x0134
 166:	90 91 35 01 	lds	r25, 0x0135
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 35 01 	sts	0x0135, r25
 170:	80 93 34 01 	sts	0x0134, r24
 174:	80 91 34 01 	lds	r24, 0x0134
 178:	90 91 35 01 	lds	r25, 0x0135
 17c:	88 3e       	cpi	r24, 0xE8	; 232
 17e:	93 40       	sbci	r25, 0x03	; 3
 180:	84 f3       	brlt	.-32     	; 0x162 <__vector_9+0x9c>
	
	//print the word and counter
	incrementer = 0;
 182:	10 92 35 01 	sts	0x0135, r1
 186:	10 92 34 01 	sts	0x0134, r1
	while(stringOut[incrementer] != 0) {
 18a:	e0 91 34 01 	lds	r30, 0x0134
 18e:	f0 91 35 01 	lds	r31, 0x0135
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	d1 f0       	breq	.+52     	; 0x1d0 <__vector_9+0x10a>
		uart_putchar(stringOut[incrementer]);
 19c:	e0 91 34 01 	lds	r30, 0x0134
 1a0:	f0 91 35 01 	lds	r31, 0x0135
 1a4:	e0 50       	subi	r30, 0x00	; 0
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 81       	ld	r24, Z
 1aa:	7a df       	rcall	.-268    	; 0xa0 <uart_putchar>
		incrementer++;
 1ac:	80 91 34 01 	lds	r24, 0x0134
 1b0:	90 91 35 01 	lds	r25, 0x0135
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 35 01 	sts	0x0135, r25
 1ba:	80 93 34 01 	sts	0x0134, r24
	// DO the 1000 cycle calculation
	for(incrementer = 0; incrementer < 1000; incrementer++);
	
	//print the word and counter
	incrementer = 0;
	while(stringOut[incrementer] != 0) {
 1be:	e0 91 34 01 	lds	r30, 0x0134
 1c2:	f0 91 35 01 	lds	r31, 0x0135
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	e6 cf       	rjmp	.-52     	; 0x19c <__vector_9+0xd6>
		uart_putchar(stringOut[incrementer]);
		incrementer++;
	}
	
	itoa(counter, buffer, 10);
 1d0:	80 91 30 01 	lds	r24, 0x0130
 1d4:	90 91 31 01 	lds	r25, 0x0131
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	64 e1       	ldi	r22, 0x14	; 20
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	a7 d0       	rcall	.+334    	; 0x330 <itoa>
	incrementer = 0;
 1e2:	10 92 35 01 	sts	0x0135, r1
 1e6:	10 92 34 01 	sts	0x0134, r1
	while(buffer[incrementer] != 0) {
 1ea:	e0 91 34 01 	lds	r30, 0x0134
 1ee:	f0 91 35 01 	lds	r31, 0x0135
 1f2:	ec 5e       	subi	r30, 0xEC	; 236
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	d1 f0       	breq	.+52     	; 0x230 <__vector_9+0x16a>
		uart_putchar(buffer[incrementer]);
 1fc:	e0 91 34 01 	lds	r30, 0x0134
 200:	f0 91 35 01 	lds	r31, 0x0135
 204:	ec 5e       	subi	r30, 0xEC	; 236
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	80 81       	ld	r24, Z
 20a:	4a df       	rcall	.-364    	; 0xa0 <uart_putchar>
		incrementer++;
 20c:	80 91 34 01 	lds	r24, 0x0134
 210:	90 91 35 01 	lds	r25, 0x0135
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 35 01 	sts	0x0135, r25
 21a:	80 93 34 01 	sts	0x0134, r24
		incrementer++;
	}
	
	itoa(counter, buffer, 10);
	incrementer = 0;
	while(buffer[incrementer] != 0) {
 21e:	e0 91 34 01 	lds	r30, 0x0134
 222:	f0 91 35 01 	lds	r31, 0x0135
 226:	ec 5e       	subi	r30, 0xEC	; 236
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	80 81       	ld	r24, Z
 22c:	81 11       	cpse	r24, r1
 22e:	e6 cf       	rjmp	.-52     	; 0x1fc <__vector_9+0x136>
		uart_putchar(buffer[incrementer]);
		incrementer++;
	}
	counter++;
 230:	80 91 30 01 	lds	r24, 0x0130
 234:	90 91 31 01 	lds	r25, 0x0131
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 31 01 	sts	0x0131, r25
 23e:	80 93 30 01 	sts	0x0130, r24
	
	uart_putchar((char) '\r');
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	2d df       	rcall	.-422    	; 0xa0 <uart_putchar>
	uart_putchar((char) '\n');
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	2b df       	rcall	.-426    	; 0xa0 <uart_putchar>
	
	//clear the timer interrupt flag
	TIFR2 |= 1;
 24a:	b8 9a       	sbi	0x17, 0	; 23
	sei();
 24c:	78 94       	sei
	
	//go back to sleep
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 24e:	83 b7       	in	r24, 0x33	; 51
 250:	81 7f       	andi	r24, 0xF1	; 241
 252:	86 60       	ori	r24, 0x06	; 6
 254:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 256:	83 b7       	in	r24, 0x33	; 51
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable(); //disable Brown out Detection during sleep
 25c:	85 b7       	in	r24, 0x35	; 53
 25e:	80 66       	ori	r24, 0x60	; 96
 260:	85 bf       	out	0x35, r24	; 53
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	85 bf       	out	0x35, r24	; 53
	sleep_cpu(); //sleep the CPU
 266:	88 95       	sleep
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <main>:
	
	//char stringOut[20] = "Hello World!";
	//char buffer[16];
	int i = 0, j= 0;
	
	counter = 0;
 28a:	10 92 31 01 	sts	0x0131, r1
 28e:	10 92 30 01 	sts	0x0130, r1
	dataNum = 0;
 292:	10 92 25 01 	sts	0x0125, r1
 296:	10 92 24 01 	sts	0x0124, r1
{
#if defined UBRR0H
	/* These values are calculated by the setbaud tool based on the values
	defined in conf_clock.h and conf_uart.h. The only thing that the application
	need to do is to load these values into the correct registers.*/
	UBRR0H = UBRRH_VALUE;
 29a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	80 93 c4 00 	sts	0x00C4, r24
#endif

	/* Check if the setbaud tool require that the 2x speed bit has to be set in
	order to reach the specified baudrate. */
#if USE_2X
	UCSR0A |= (1 << U2X0);
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	80 83       	st	Z, r24
#endif

	// Enable RX and TX and set up port
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2ae:	88 e1       	ldi	r24, 0x18	; 24
 2b0:	80 93 c1 00 	sts	0x00C1, r24
	// Set the TX pin as output
	UART_PORT_DDR |= (1 << UART_TX_PIN);
 2b4:	51 9a       	sbi	0x0a, 1	; 10
	// Set the RX pin as input
	//UART_PORT_DDR &= ~(1 << UART_RX_PIN);

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 2b6:	86 e0       	ldi	r24, 0x06	; 6
 2b8:	80 93 c2 00 	sts	0x00C2, r24
	
	// Set up baud rate registers
	uart_init();
	
	//enable ADC
	enableADC();
 2bc:	f9 de       	rcall	.-526    	; 0xb0 <enableADC>
//setup the timer interrupt
static void init_timer_interrupt(void) {
	//TCCR2A &= 0xFE; //Make sure we are using CTC mode (reset timer when matches)
	//TCCR2A |= 0x02; 
	
	TCCR2B &= 0xF5; //Make sure we are using CTC mode and using 32K/128 prescaler
 2be:	e1 eb       	ldi	r30, 0xB1	; 177
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	85 7f       	andi	r24, 0xF5	; 245
 2c6:	80 83       	st	Z, r24
	TCCR2B |= 0x05;
 2c8:	80 81       	ld	r24, Z
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	80 83       	st	Z, r24
	
	//TCCR2B &= 0xF7; //Make sure we are using CTC mode and using 32K/128
	//TCCR2B |= 0x07;
	
	TIMSK2 = _BV(TOIE2); //enable to overflow
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 70 00 	sts	0x0070, r24
	ASSR |= 0x20; //clocked using external 32Khz clock
 2d4:	e6 eb       	ldi	r30, 0xB6	; 182
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 62       	ori	r24, 0x20	; 32
 2dc:	80 83       	st	Z, r24
	sei();
 2de:	78 94       	sei
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0x56>

000002e2 <__divmodhi4>:
 2e2:	97 fb       	bst	r25, 7
 2e4:	07 2e       	mov	r0, r23
 2e6:	16 f4       	brtc	.+4      	; 0x2ec <__divmodhi4+0xa>
 2e8:	00 94       	com	r0
 2ea:	06 d0       	rcall	.+12     	; 0x2f8 <__divmodhi4_neg1>
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	08 d0       	rcall	.+16     	; 0x300 <__divmodhi4_neg2>
 2f0:	0b d0       	rcall	.+22     	; 0x308 <__udivmodhi4>
 2f2:	07 fc       	sbrc	r0, 7
 2f4:	05 d0       	rcall	.+10     	; 0x300 <__divmodhi4_neg2>
 2f6:	3e f4       	brtc	.+14     	; 0x306 <__divmodhi4_exit>

000002f8 <__divmodhi4_neg1>:
 2f8:	90 95       	com	r25
 2fa:	81 95       	neg	r24
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	08 95       	ret

00000300 <__divmodhi4_neg2>:
 300:	70 95       	com	r23
 302:	61 95       	neg	r22
 304:	7f 4f       	sbci	r23, 0xFF	; 255

00000306 <__divmodhi4_exit>:
 306:	08 95       	ret

00000308 <__udivmodhi4>:
 308:	aa 1b       	sub	r26, r26
 30a:	bb 1b       	sub	r27, r27
 30c:	51 e1       	ldi	r21, 0x11	; 17
 30e:	07 c0       	rjmp	.+14     	; 0x31e <__udivmodhi4_ep>

00000310 <__udivmodhi4_loop>:
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	a6 17       	cp	r26, r22
 316:	b7 07       	cpc	r27, r23
 318:	10 f0       	brcs	.+4      	; 0x31e <__udivmodhi4_ep>
 31a:	a6 1b       	sub	r26, r22
 31c:	b7 0b       	sbc	r27, r23

0000031e <__udivmodhi4_ep>:
 31e:	88 1f       	adc	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	5a 95       	dec	r21
 324:	a9 f7       	brne	.-22     	; 0x310 <__udivmodhi4_loop>
 326:	80 95       	com	r24
 328:	90 95       	com	r25
 32a:	bc 01       	movw	r22, r24
 32c:	cd 01       	movw	r24, r26
 32e:	08 95       	ret

00000330 <itoa>:
 330:	fb 01       	movw	r30, r22
 332:	9f 01       	movw	r18, r30
 334:	e8 94       	clt
 336:	42 30       	cpi	r20, 0x02	; 2
 338:	bc f0       	brlt	.+46     	; 0x368 <itoa+0x38>
 33a:	45 32       	cpi	r20, 0x25	; 37
 33c:	ac f4       	brge	.+42     	; 0x368 <itoa+0x38>
 33e:	4a 30       	cpi	r20, 0x0A	; 10
 340:	29 f4       	brne	.+10     	; 0x34c <itoa+0x1c>
 342:	97 fb       	bst	r25, 7
 344:	1e f4       	brtc	.+6      	; 0x34c <itoa+0x1c>
 346:	90 95       	com	r25
 348:	81 95       	neg	r24
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	64 2f       	mov	r22, r20
 34e:	77 27       	eor	r23, r23
 350:	db df       	rcall	.-74     	; 0x308 <__udivmodhi4>
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	8a 33       	cpi	r24, 0x3A	; 58
 356:	0c f0       	brlt	.+2      	; 0x35a <itoa+0x2a>
 358:	89 5d       	subi	r24, 0xD9	; 217
 35a:	81 93       	st	Z+, r24
 35c:	cb 01       	movw	r24, r22
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	a9 f7       	brne	.-22     	; 0x34c <itoa+0x1c>
 362:	16 f4       	brtc	.+4      	; 0x368 <itoa+0x38>
 364:	5d e2       	ldi	r21, 0x2D	; 45
 366:	51 93       	st	Z+, r21
 368:	10 82       	st	Z, r1
 36a:	c9 01       	movw	r24, r18
 36c:	00 c0       	rjmp	.+0      	; 0x36e <strrev>

0000036e <strrev>:
 36e:	dc 01       	movw	r26, r24
 370:	fc 01       	movw	r30, r24
 372:	67 2f       	mov	r22, r23
 374:	71 91       	ld	r23, Z+
 376:	77 23       	and	r23, r23
 378:	e1 f7       	brne	.-8      	; 0x372 <strrev+0x4>
 37a:	32 97       	sbiw	r30, 0x02	; 2
 37c:	04 c0       	rjmp	.+8      	; 0x386 <strrev+0x18>
 37e:	7c 91       	ld	r23, X
 380:	6d 93       	st	X+, r22
 382:	70 83       	st	Z, r23
 384:	62 91       	ld	r22, -Z
 386:	ae 17       	cp	r26, r30
 388:	bf 07       	cpc	r27, r31
 38a:	c8 f3       	brcs	.-14     	; 0x37e <strrev+0x10>
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
