
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000012b  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c4  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000762  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ae77  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000c13b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000c177  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002cf9  00000000  00000000  0000c19f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__vector_3>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	10 d0       	rcall	.+32     	; 0x96 <main>
  76:	20 c0       	rjmp	.+64     	; 0xb8 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <__vector_3>:
 *
 * Create breakpoint here and then run. Press SW0 in order to test
 * this.
 */
ISR(EXAMPLE_PCINT_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
	/* Toggle PD0 (LED0)
	 *
	 * Note that it will toggle both on button press and release.
	 */
	PIND = (1 << PIND0);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 b9       	out	0x09, r24	; 9
}
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <main>:
	/* Use port D for output to control the STK600 LEDs.
	 *
	 * First set the data direction register to 0xff in order to set all
	 * port pins to output function.
	 */
	DDRD = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10

	// Set output levels high. Will turn off STK600 LEDs.
	PORTD = 0xff;
  9a:	8b b9       	out	0x0b, r24	; 11

	// Set output levels low. Will turn on STK600 LEDs.
	PORTD = 0;
  9c:	1b b8       	out	0x0b, r1	; 11
	 *
	 * But a typical requirement when reading switches are pull-ups. STK600
	 * don't require these, but we enable the internal pull-ups just to be
	 * on the safe side.
	 */
	PORTB = 0xff;
  9e:	85 b9       	out	0x05, r24	; 5
	 *
	 * Press any of the STK600 switches in order to see a difference here.
	 * A press will be seen as bit value 0 and not press is 1 due to
	 * pull-ups.
	 */
	val = PINB;
  a0:	83 b1       	in	r24, 0x03	; 3

	/* It's also possible to control a single or a set of pins on a port.
	 *
	 * Setting pin PD0 high in order to turn off LED0.
	 */
	PORTD |= (1 << PORTD0);
  a2:	58 9a       	sbi	0x0b, 0	; 11

	// Setting pin PD1 low in order to turn on LED1.
	PORTD &= ~(1 << PORTD1);
  a4:	59 98       	cbi	0x0b, 1	; 11
	 * This isn't safe for interrupts.
	 */
	PORTD ^= (1 << PIND0) | (1 << PIND1);
#else
	// Use PIN register to toggle on newer megaAVR devices
	PIND = (1 << PIND0) | (1 << PIND1);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	89 b9       	out	0x09, r24	; 9
#ifdef EXAMPLE_PCICR
	/* Enable pin change interrupt for PB0 which is controlled by SW0
	 *
	 * First we need to enable pin change interrupt for the wanted port.
	 */
	EXAMPLE_PCICR = (1 << EXAMPLE_PCIE);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 68 00 	sts	0x0068, r24

	// Then we need to set the pin change port mask to get the bit we want.
	EXAMPLE_PCMSK = (1 << PCINT0);
  b0:	80 93 6b 00 	sts	0x006B, r24
#endif

	// Enable interrupts
	sei();
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x20>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
